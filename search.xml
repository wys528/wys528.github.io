<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>java基础2</title>
      <link href="/2024/07/10/java%E5%9F%BA%E7%A1%802/"/>
      <url>/2024/07/10/java%E5%9F%BA%E7%A1%802/</url>
      
        <content type="html"><![CDATA[<h4 id="多态性，对象转换类型"><a href="#多态性，对象转换类型" class="headerlink" title="多态性，对象转换类型"></a>多态性，对象转换类型</h4><p>父类不能强转成子类</p><h4 id="关键字static"><a href="#关键字static" class="headerlink" title="关键字static"></a>关键字static</h4><p>static关键字表示静态，可以修饰成员变量、方法和代码块。</p><p>static修饰成员变量：</p><p>1、被static修饰的属性所用对象共享同一个值</p><p>2、被static修饰的属性值会被保存在内存的方法区中</p><p>3、当该类的所有对象共享一个资源时，将这个资源设置为静态能够节省内存</p><p>4、静态属性使用类名调用</p><p>5、静态属性也称类属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Cat cat01=<span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line">        Cat cat02=<span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line">        cat01.name=<span class="string">&quot;小黄&quot;</span>;</span><br><span class="line">        cat01.eat(<span class="string">&quot;面包&quot;</span>);</span><br><span class="line">        Cat.eat(<span class="string">&quot;鱼&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Cat.name=<span class="string">&quot;小白&quot;</span>;</span><br><span class="line">        Cat.eat(<span class="string">&quot;鱼&quot;</span>);</span><br><span class="line">        cat01.eat(<span class="string">&quot;面包&quot;</span>);</span><br><span class="line">        cat02.eat(<span class="string">&quot;饺子&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        cat02.name=<span class="string">&quot;小黑&quot;</span>;</span><br><span class="line">        cat02.eat(<span class="string">&quot;饺子&quot;</span>);</span><br><span class="line">        cat01.eat(<span class="string">&quot;面包&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cat</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">(String food)</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(name+<span class="string">&quot;吃&quot;</span>+food);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>static修饰方法:</p><p>1、被static修饰的方法称之为静态方法、类方法</p><p>2、静态方法可以直接使用类名无需实例化对象</p><p>3、静态方法中无法调用普通（实例）属性和方法，因为静态方法中没有this</p><p>4、如果一个不需要访问当前类中的实例成员就可以定义称静态的</p><p>5、静态方法不能被重写</p><h4 id="abstract关键字"><a href="#abstract关键字" class="headerlink" title="abstract关键字"></a>abstract关键字</h4><p>abstract表示抽象的，可以修饰类和方法。</p><h3 id="方法重写规则与包装类型"><a href="#方法重写规则与包装类型" class="headerlink" title="方法重写规则与包装类型"></a>方法重写规则与包装类型</h3><h4 id="重写方法规则一："><a href="#重写方法规则一：" class="headerlink" title="重写方法规则一："></a>重写方法规则一：</h4><p>方法名和形式参数必须具有完全相同的签名，返回类型也必须一致。方法可以改变返回类型，但子类的返回类型必须时父类返回类型的子类型。例如，如果父类的方法返回一个Object，子类的重写方法可以返回一个String，但重写方法不能返回Integer,因为String不是Integer的子类型</p><p>子类重写的方法可以改变其访问权限，比如将父类中的Protected方法重写为public方法</p><p> 子类重写的方法不能抛出比父类中被重写的方法更广泛的异常</p><h4 id="重写方法规则二"><a href="#重写方法规则二" class="headerlink" title="重写方法规则二:"></a>重写方法规则二:</h4><p>如果一个类声明了一个带有final关键字，表明此方法为不可变的，不能被重写</p><p> 子类可以重写父类中被声明为static的方法，但必须保持方法的签名（方法名和参数列表）完全一致</p><p>子类重写的方法可以调用父类中被重写的方法，而且可以使用super关键字在子类中直接调用父类中被重写的方法</p><h4 id="包装类型"><a href="#包装类型" class="headerlink" title="包装类型"></a>包装类型</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> age=<span class="number">18</span>;</span><br><span class="line">        Integer age2=Integer.valueOf(<span class="number">19</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;age &quot;</span>+age);</span><br><span class="line">        System.out.println(<span class="string">&quot;age2 &quot;</span>+age2.intValue());</span><br><span class="line">        System.out.println(<span class="string">&quot;age2 &quot;</span>+age2.toString());</span><br><span class="line">        System.out.println(<span class="string">&quot;age2 &quot;</span>+age2);</span><br><span class="line">        System.out.println(<span class="string">&quot;age2 &quot;</span>+age2.byteValue());<span class="comment">//取位数最低的一字节</span></span><br><span class="line">        Boolean isObj=Boolean.valueOf(age2 <span class="keyword">instanceof</span> Object);</span><br><span class="line">        System.out.println(<span class="string">&quot;isObj:&quot;</span>+isObj.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="接口的定义和实现"><a href="#接口的定义和实现" class="headerlink" title="接口的定义和实现"></a>接口的定义和实现</h4><p>接口的关键字：interface</p><p>在定义一个接口时，我们需要把public class xxx 中的class改成interface，即public interface xxx ,这就是定义了一个接口。</p><h4 id="接口中的定义的方法与常量"><a href="#接口中的定义的方法与常量" class="headerlink" title="接口中的定义的方法与常量"></a>接口中的定义的方法与常量</h4><p>在定义方法时，例如我们定义一个run方法与go方法，我们可以写成public abstract void run();和 public abstract void go();但是因为在接口的定义中都是public  abstract，因此我们只需要写：void run();和void go();即可。即直接写：方法类型+方法名（参数 类型）即可。</p><p>在定义常量时，因为接口中所有的常量都是public static void final, 而final类是无法被继承的，所以我们不经常在接口中定义常量</p><p>接口及其实现类，implements关键字</p><p>由于接口仅仅能给我们定义一个方法，无法让我们去实例化（即实现它），因此我们需要再写一个实现类来实现它，而这个实现类的名字就是接口名+Impl</p><p>Impl就是implements，而想要实现接口中的类，就需要重写接口中的所有方法</p><h4 id="接口与继承的不同"><a href="#接口与继承的不同" class="headerlink" title="接口与继承的不同"></a>接口与继承的不同</h4><p>接口为多继承，而extend是单继承，例如我们在这里再定义一个TimerServi的接口，我们可以再UserService实现类中再继承一个TimeService，只要重写TimeService中的方法即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> implents UserService, TimeService&#123;&#125;</span><br></pre></td></tr></table></figure><p>Main函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Cat cat=<span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line">        cat.sleep();</span><br><span class="line">        cat.hunt();</span><br><span class="line">        cat.playwithme();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Animal接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Animal</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Pet接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Pet</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">playwithme</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Hunt接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Hunt</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">hunt</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Cat类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">implements</span> <span class="title class_">Animal</span>,Hunt,Pet</span><br><span class="line">&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;睡觉&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hunt</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;打猎&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">playwithme</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;吃饭&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="内部类与匿名类"><a href="#内部类与匿名类" class="headerlink" title="内部类与匿名类"></a>内部类与匿名类</h4><p>Java中的类有两种重要的成员，即成员变量和方法。其实Java还允许类有一种成员，即在一个类中声明另一个类，这就是内部类，而包含内部类的类叫做外嵌类</p><p>内部类与外嵌类之间的关系如下：</p><p>内部类可以使用外嵌类的成员变量和方法</p><p>内部类中不可以声明类变量和类方法</p><p>外嵌类可以使用内部类声明对象作为外嵌类的成员</p><p>内部类仅供它的外嵌类使用，其他类不可以用某个类的内部类声明对象</p><p>Main</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Farm farm=<span class="keyword">new</span> <span class="title class_">Farm</span>(<span class="string">&quot;红星农场&quot;</span>);</span><br><span class="line">        farm.cow.speak();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Farm类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Farm</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> String farmName;</span><br><span class="line">    <span class="keyword">public</span> Cow cow=<span class="keyword">new</span> <span class="title class_">Cow</span>(<span class="number">5</span>,<span class="string">&quot;hyq&quot;</span>);</span><br><span class="line">    Farm(String pFarmName)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">this</span>.farmName=pFarmName;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Cow</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> String cowName;</span><br><span class="line">        <span class="type">int</span> age;</span><br><span class="line">        Cow(<span class="type">int</span> pAge,String pCowName)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">this</span>.age=pAge;</span><br><span class="line">            <span class="built_in">this</span>.cowName=pCowName;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">speak</span><span class="params">()</span></span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;我是&quot;</span>+cowName+<span class="string">&quot;,年龄&quot;</span>+age+<span class="string">&quot;我所在农场: &quot;</span>+farmName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>内部类可以被修饰为static内部类，类是一种数据类型，那么static内部类就是外嵌类中的一种静态数据类型，这样其他类就可以使用static内部类来声明创建对象了。（注意：static内部类不能操作外嵌类中的实例成员变量）</p><h4 id="和类有关的匿名类"><a href="#和类有关的匿名类" class="headerlink" title="和类有关的匿名类"></a>和类有关的匿名类</h4><p>我们可以直接使用一个类的子类的类体创建一个对象。再创建子类对象时，使用的是父类的构造方法和类体，这个类体被认为是子类去掉类声明之后的类体，称作匿名类</p><p>Main</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Farm farm=<span class="keyword">new</span> <span class="title class_">Farm</span>(<span class="string">&quot;红星农场&quot;</span>);</span><br><span class="line">        farm.cow.speak();</span><br><span class="line">       Speak speak=<span class="keyword">new</span> <span class="title class_">Speak</span>()</span><br><span class="line">       &#123;</span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">speakhello</span><span class="params">()</span></span><br><span class="line">           &#123;</span><br><span class="line">               System.out.println(<span class="string">&quot;hello ! 一&quot;</span>);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Speak</span>()</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">speakhello</span><span class="params">()</span></span><br><span class="line">            &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;hello ! 二&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Speak类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Speak</span></span><br><span class="line">&#123;</span><br><span class="line">    Speak()</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是父类&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">speakhello</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>匿名对象的引用可以传递给一个匹配的参数，匿名类常用的方式是向方法的参数传值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Main中的代码片段      </span></span><br><span class="line">A a=<span class="keyword">new</span> <span class="title class_">A</span>();</span><br><span class="line">        a.f(<span class="keyword">new</span> <span class="title class_">Speak</span>()</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">speakhello</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;hello ! 三&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Speak类</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Speak</span></span><br><span class="line">&#123;</span><br><span class="line">    Speak()</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是父类&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">speakhello</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="和接口有关的匿名类"><a href="#和接口有关的匿名类" class="headerlink" title="和接口有关的匿名类"></a>和接口有关的匿名类</h4><p>我们可以直接使用接口名和一个类体创建一个匿名对象，这个类体被称为是实现了这个接口的类去掉声明后的类体，称为匿名类。</p><p>如果某个方法的参数是接口类型，那么可以使用接口名和类体组合创建一个匿名对象传递给这个方法的参数，但类体必须重写接口中的所有方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Main中的代码片段 </span></span><br><span class="line"><span class="comment">//和接口有关的匿名类</span></span><br><span class="line">        <span class="type">Cubic</span> <span class="variable">cubic</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cubic</span>()</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getCubic</span><span class="params">(<span class="type">double</span> x)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> x * x * x;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        System.out.println(cubic.getCubic(<span class="number">3</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">Cubic</span>()</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getCubic</span><span class="params">(<span class="type">double</span> x)</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> x * x * x;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.getCubic(<span class="number">4</span>));</span><br><span class="line"><span class="comment">//Cubic类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Cubic</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">double</span> <span class="title function_">getCubic</span><span class="params">(<span class="type">double</span> x)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//传参方法</span></span><br><span class="line">B b=<span class="keyword">new</span> <span class="title class_">B</span>();</span><br><span class="line">        b.g(<span class="keyword">new</span> <span class="title class_">Cubic</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getCubic</span><span class="params">(<span class="type">double</span> x)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> x*x*x;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><h4 id="数组声明与定义区别"><a href="#数组声明与定义区别" class="headerlink" title="数组声明与定义区别"></a>数组声明与定义区别</h4><p>对于变量来说，Java 定义就是声明</p><p>例如：int[] a; 我们可说它是定义也可以说它是声明</p><h4 id="定义初始化方法（见下方代码）"><a href="#定义初始化方法（见下方代码）" class="headerlink" title="定义初始化方法（见下方代码）"></a>定义初始化方法（见下方代码）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//数组定义</span></span><br><span class="line">        <span class="type">int</span>[] arr1 = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line">        <span class="type">int</span>[] arr2 = <span class="keyword">new</span> <span class="title class_">int</span> [<span class="number">4</span>];</span><br><span class="line">        <span class="type">int</span> arr3_len=<span class="number">5</span>;</span><br><span class="line">        <span class="type">int</span>[] arr3=<span class="keyword">new</span> <span class="title class_">int</span>[arr3_len];</span><br><span class="line">        <span class="comment">//错误演示</span></span><br><span class="line">        <span class="comment">//int[] arr4;</span></span><br><span class="line">        <span class="comment">//arr4=&#123;4,5,6&#125;;  错误原因，定义和初始化必须在一起</span></span><br><span class="line">        <span class="comment">//int[] arr4=new int[]&#123;5,6,7,8&#125; 错误原因，不可指定长度</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//访问元素</span></span><br><span class="line">        <span class="type">int</span>[] arr4=<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>&#125;;</span><br><span class="line">        <span class="type">int</span> one=arr4[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt; arr4.length;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;arr4 下标&quot;</span>+i+<span class="string">&quot;:&quot;</span>+arr4[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//数组的复制 拷贝</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//浅拷贝</span></span><br><span class="line">        <span class="type">int</span>[] arr5=arr4;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//深拷贝</span></span><br><span class="line">        <span class="type">int</span>[] arr6= <span class="keyword">new</span> <span class="title class_">int</span>[arr4.length];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;arr4.length;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            arr6[j]=arr4[j];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i:arr6)</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span>[] arr7=&#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;;</span><br><span class="line">        System.arraycopy(arr4,<span class="number">0</span>,arr7,<span class="number">1</span>,arr4.length);</span><br><span class="line">        <span class="comment">//不规则数组</span></span><br><span class="line">        <span class="type">int</span>[][] arr8=<span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">4</span>][];</span><br><span class="line">        arr8[<span class="number">0</span>]=<span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>];</span><br><span class="line">        arr8[<span class="number">1</span>]=<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>&#125;;</span><br><span class="line">        arr8[<span class="number">2</span>]=<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;;</span><br><span class="line">        arr8[<span class="number">3</span>]=<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> m=<span class="number">0</span>;m&lt;arr8.length;m++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> n=<span class="number">0</span>;n&lt;arr8[m].length;n++)</span><br><span class="line">            &#123;</span><br><span class="line">                System.out.println(arr8[m][n]+<span class="string">&quot;,&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><p>Java.lang.String是java的字符串类. String是一个不可变的对象，所有对String修改的操作都需要构造新的String实例。</p><p>java.lang.StringBuffer与java.lang.StringBuilder是可变的字符串对象，StringBuilder较快但是线程不安全，在对线程安全没有要求时我们通常使用StringBuilder</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">char</span>[] data=&#123;<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>&#125;;</span><br><span class="line">        String s1= <span class="keyword">new</span> <span class="title class_">String</span>(data);</span><br><span class="line">        String s2= <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;efg&quot;</span>);</span><br><span class="line">        String s3=<span class="string">&quot;hijk&quot;</span>;</span><br><span class="line">        String s4=<span class="string">&quot;lmn&quot;</span>;</span><br><span class="line">        String s5=<span class="string">&quot;&quot;</span>;</span><br><span class="line">        StringBuffer sb=<span class="keyword">new</span> <span class="title class_">StringBuffer</span>(s3);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10000</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            s5=s3+i;</span><br><span class="line">            sb.append(i);</span><br><span class="line">            System.out.println(s5);</span><br><span class="line">            System.out.println(sb.toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h3><p>集合与数组</p><p>容器的分类：</p><p>Collection：List、Set</p><p>Map：HashMap、HashTable、TreeMap、ConcurrHashMap</p><p>List 有序集合，允许重复的元素</p><p>Set无序集合，不允许重复的元素</p><p>HashMap：采用散列算法来实现，底层用哈希表来存储数据，因此要求键不能重复。线程不安全，HashMap在查找、删除、修改方面效率都非常高。允许key或value为null</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//List</span></span><br><span class="line">        List myList=<span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        myList.add(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">        myList.add(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">        myList.add(<span class="string">&quot;C&quot;</span>);</span><br><span class="line">        myList.add(<span class="string">&quot;D&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;myList.size();i++)</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(myList.get(i));</span><br><span class="line">        &#125;</span><br><span class="line">        Iterator it=myList.iterator();</span><br><span class="line">        <span class="keyword">while</span>(it.hasNext())</span><br><span class="line">        &#123;</span><br><span class="line">            Object o=it.next();</span><br><span class="line">            System.out.println(o);</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;String&gt; aList=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        aList.add(<span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">        <span class="comment">//HashMap</span></span><br><span class="line">        Map&lt;String,String&gt;map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;张三&quot;</span>,<span class="string">&quot;福建省&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;王五&quot;</span>,<span class="string">&quot;湖南省&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;李四&quot;</span>,<span class="string">&quot;海南省&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(Map.Entry&lt;String,String&gt; entry:map.entrySet())</span><br><span class="line">        &#123;</span><br><span class="line">            String key=entry.getKey();</span><br><span class="line">            String val=entry.getValue();</span><br><span class="line">            System.out.println(<span class="string">&quot;key&quot;</span>+key+<span class="string">&quot;,&quot;</span>+<span class="string">&quot;val&quot;</span>+val);</span><br><span class="line">        &#125;</span><br><span class="line">        Iterator&lt;Map.Entry&lt;String,String&gt;&gt;entries=map.entrySet().iterator();</span><br><span class="line">        <span class="keyword">while</span>(entries.hasNext())</span><br><span class="line">        &#123;</span><br><span class="line">            Map.Entry&lt;String,String&gt;entry=entries.next();</span><br><span class="line">            String key= entry.getKey();</span><br><span class="line">            String val=entry.getValue();</span><br><span class="line">            System.out.println(<span class="string">&quot;key&quot;</span>+key+<span class="string">&quot;,val&quot;</span>+val);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(String oneKey:map.keySet())</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(String oneVal:map.values())</span><br><span class="line">        &#123;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>java基础1</title>
      <link href="/2024/07/09/java%E5%9F%BA%E7%A1%801/"/>
      <url>/2024/07/09/java%E5%9F%BA%E7%A1%801/</url>
      
        <content type="html"><![CDATA[<h1 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a>Java基础</h1><h4 id="查看对象在内存中的布局"><a href="#查看对象在内存中的布局" class="headerlink" title="查看对象在内存中的布局"></a>查看对象在内存中的布局</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">import</span> org.openjdk.jol.info.ClassLayout;</span><br><span class="line">System.out.println(ClassLayout.parseInstance(student).toPrintable());</span><br></pre></td></tr></table></figure><h4 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h4><p>单行：Ctrl + &#x2F;</p><p>多行：Ctrl + shift + &#x2F;  常用于：说明方法作用或一段代码功能</p><p>文档：&#x2F;** 常用于：类定义或公有方法定义的前面</p><h4 id="创建数组类"><a href="#创建数组类" class="headerlink" title="创建数组类"></a>创建数组类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;Integer&gt;arraylist=<span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br></pre></td></tr></table></figure><p>常量关键字：final</p><p>算数左移（符号位不变，右边补零p&lt;&lt;3）</p><p>算数右移（符号位不变，左边补符号位p&gt;&gt;3）</p><p>逻辑右移（左边补0 p&gt;&gt;&gt;3）</p><h4 id="三目运算符"><a href="#三目运算符" class="headerlink" title="三目运算符"></a>三目运算符</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">q&gt;r?a:b</span><br></pre></td></tr></table></figure><h4 id="instance判断是否是Student类的实例"><a href="#instance判断是否是Student类的实例" class="headerlink" title="instance判断是否是Student类的实例"></a>instance判断是否是Student类的实例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(s1 <span class="keyword">instanceof</span> student)</span><br><span class="line">&#123;</span><br><span class="line">    System.out.pritln(<span class="string">&quot;s1是student的实例&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h4><p>boolean类型的不能转换成其他类型</p><p>在混合运算中，容量小的类型自动转换为大容量的数据类型，排序如下：</p><p>byte,short,char-&gt;int-&gt;long-&gt;float-&gt;double</p><p>byte,short,char之间不会相互转换，他们三者在计算时首先会转换为int类型</p><p>容量大的数据类型转换为容量小的类型时要加上强制转换符</p><p>有多种类型的数据混合运算时，系统首先自动将所有的数据转换成容量最大的那种数据类型，然后进行计算</p><p>默认出现小数都算double</p><p>默认出现数字都算int</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> i1=<span class="number">123</span>;</span><br><span class="line">        <span class="type">int</span> i2=<span class="number">456</span>;</span><br><span class="line">        <span class="type">double</span> d1=(i1+i2)*<span class="number">1.2</span>;<span class="comment">//自动类型转换</span></span><br><span class="line">        <span class="type">float</span> f1=(<span class="type">float</span>)((i1+i2)*<span class="number">1.2</span>);</span><br><span class="line">        <span class="type">byte</span> b1=<span class="number">67</span>;</span><br><span class="line">        <span class="type">byte</span> b2=<span class="number">89</span>;</span><br><span class="line">        <span class="type">byte</span> b3=(<span class="type">byte</span>)(b1+b2);</span><br><span class="line">        <span class="type">double</span> d2=<span class="number">1e200</span>;</span><br><span class="line">        System.out.println(d2);</span><br><span class="line">        <span class="type">float</span> f2=(<span class="type">float</span>)(d2);</span><br><span class="line">        System.out.println(f2);<span class="comment">//打印输出 f2 的值。由于 d2 超出了 float 的表示范围，所以 f2 将会是特定的值，通常是 Infinity 或 -Infinity，这取决于 d2 的正负。</span></span><br><span class="line">        <span class="type">float</span> f3=<span class="number">1.23f</span>;</span><br><span class="line">        <span class="type">long</span> l1=<span class="number">123</span>;</span><br><span class="line">        <span class="type">long</span> l2=<span class="number">3000000L</span>;</span><br><span class="line">        <span class="type">float</span> f4=l1+l2+f3;</span><br><span class="line">        System.out.println(f4);</span><br><span class="line">        <span class="type">long</span> l3=(<span class="type">long</span>)f4;</span><br><span class="line">        System.out.println(l3);</span><br><span class="line">        <span class="type">byte</span> a=(<span class="type">byte</span>)<span class="number">128</span>;</span><br><span class="line">        System.out.println(a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="for循环遍历数组"><a href="#for循环遍历数组" class="headerlink" title="for循环遍历数组"></a>for循环遍历数组</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> arr[]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i:arr)</span><br><span class="line">&#123;</span><br><span class="line">    System.out.println(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="类的定义格式（移动窗口例子）"><a href="#类的定义格式（移动窗口例子）" class="headerlink" title="类的定义格式（移动窗口例子）"></a>类的定义格式（移动窗口例子）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span></span><br><span class="line">    &#123;</span><br><span class="line">        MyFrame myFrame=<span class="keyword">new</span> <span class="title class_">MyFrame</span>();</span><br><span class="line">        myFrame.createWindow();</span><br><span class="line">        myFrame.walk();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyFrame</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> selfWidth=<span class="number">500</span>,selfHeigth=<span class="number">300</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> x=<span class="number">200</span>,y=<span class="number">300</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> screenWidth=<span class="number">0</span>,screenHeigth=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> ScreenWidth=<span class="number">0</span>,ScreenHeight=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> loopCount=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> flagX=<span class="literal">true</span>,flagY=<span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">private</span> Frame frame;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">createWindow</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//创建窗口</span></span><br><span class="line">        frame=<span class="keyword">new</span> <span class="title class_">Frame</span>(<span class="string">&quot;台球窗口例子&quot;</span>);</span><br><span class="line">        <span class="comment">//窗口的可见性</span></span><br><span class="line">        frame.setVisible(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">//窗口的大小</span></span><br><span class="line">        frame.setSize(selfWidth,selfHeigth);</span><br><span class="line">        <span class="comment">//窗口的背景色</span></span><br><span class="line">        frame.setBackground(<span class="keyword">new</span> <span class="title class_">Color</span>(<span class="number">10</span>,<span class="number">10</span>,<span class="number">200</span>));</span><br><span class="line">        <span class="comment">//窗口位置</span></span><br><span class="line">        frame.setLocation(x,y);</span><br><span class="line">        <span class="comment">//窗口的大小是否可改变</span></span><br><span class="line">        frame.setResizable(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">//获取屏幕尺寸</span></span><br><span class="line">        Dimension screenSize=Toolkit.getDefaultToolkit().getScreenSize();</span><br><span class="line">        screenWidth=screenSize.width;</span><br><span class="line">        screenHeigth= screenSize.height;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">walk</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            loopCount+=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">4</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(x&lt;<span class="number">0</span>||(x+selfWidth)&gt;screenWidth)</span><br><span class="line">            &#123;</span><br><span class="line">                flagX=!flagX;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(y&lt;<span class="number">0</span>||(y+selfHeigth)&gt;screenHeigth)</span><br><span class="line">            &#123;</span><br><span class="line">                flagY=!flagY;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(flagX)</span><br><span class="line">            &#123;</span><br><span class="line">                x+=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                x-=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(flagY)</span><br><span class="line">            &#123;</span><br><span class="line">                y+=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                y-=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            frame.setLocation(x,y);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="继承的基本概念"><a href="#继承的基本概念" class="headerlink" title="继承的基本概念"></a>继承的基本概念</h4><p>访问父类用super.</p><h4 id="访问权限控制"><a href="#访问权限控制" class="headerlink" title="访问权限控制"></a>访问权限控制</h4><p>private：只能在类内部访问（权限要求最高，能被访问的范围越小）。</p><p>default（啥也不写，默认的）：包级权限，可以被同包的其他类访问</p><p>protected:可以被子类访问，也可以被同包的其他类访问到， protected在被同包的类访问的基础上，还能被其他包的子类访 问。</p><p>public：可以在类外部访问（权限要求最低）</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
